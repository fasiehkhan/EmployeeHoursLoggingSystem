{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\n/**\n * An object with methods that are called during the traversal of the coverage tree.\n * A visitor has the following methods that are called during tree traversal.\n *\n *   * `onStart(root, state)` - called before traversal begins\n *   * `onSummary(node, state)` - called for every summary node\n *   * `onDetail(node, state)` - called for every detail node\n *   * `onSummaryEnd(node, state)` - called after all children have been visited for\n *      a summary node.\n *   * `onEnd(root, state)` - called after traversal ends\n *\n * @param delegate - a partial visitor that only implements the methods of interest\n *  The visitor object supplies the missing methods as noops. For example, reports\n *  that only need the final coverage summary need implement `onStart` and nothing\n *  else. Reports that use only detailed coverage information need implement `onDetail`\n *  and nothing else.\n * @constructor\n */\nclass Visitor {\n  constructor(delegate) {\n    this.delegate = delegate;\n  }\n}\n['Start', 'End', 'Summary', 'SummaryEnd', 'Detail'].map(k => `on${k}`).forEach(fn => {\n  Object.defineProperty(Visitor.prototype, fn, {\n    writable: true,\n    value(node, state) {\n      if (typeof this.delegate[fn] === 'function') {\n        this.delegate[fn](node, state);\n      }\n    }\n  });\n});\nclass CompositeVisitor extends Visitor {\n  constructor(visitors) {\n    super();\n    if (!Array.isArray(visitors)) {\n      visitors = [visitors];\n    }\n    this.visitors = visitors.map(v => {\n      if (v instanceof Visitor) {\n        return v;\n      }\n      return new Visitor(v);\n    });\n  }\n}\n['Start', 'Summary', 'SummaryEnd', 'Detail', 'End'].map(k => `on${k}`).forEach(fn => {\n  Object.defineProperty(CompositeVisitor.prototype, fn, {\n    value(node, state) {\n      this.visitors.forEach(v => {\n        v[fn](node, state);\n      });\n    }\n  });\n});\nclass BaseNode {\n  isRoot() {\n    return !this.getParent();\n  }\n\n  /**\n   * visit all nodes depth-first from this node down. Note that `onStart`\n   * and `onEnd` are never called on the visitor even if the current\n   * node is the root of the tree.\n   * @param visitor a full visitor that is called during tree traversal\n   * @param state optional state that is passed around\n   */\n  visit(visitor, state) {\n    if (this.isSummary()) {\n      visitor.onSummary(this, state);\n    } else {\n      visitor.onDetail(this, state);\n    }\n    this.getChildren().forEach(child => {\n      child.visit(visitor, state);\n    });\n    if (this.isSummary()) {\n      visitor.onSummaryEnd(this, state);\n    }\n  }\n}\n\n/**\n * abstract base class for a coverage tree.\n * @constructor\n */\nclass BaseTree {\n  constructor(root) {\n    this.root = root;\n  }\n\n  /**\n   * returns the root node of the tree\n   */\n  getRoot() {\n    return this.root;\n  }\n\n  /**\n   * visits the tree depth-first with the supplied partial visitor\n   * @param visitor - a potentially partial visitor\n   * @param state - the state to be passed around during tree traversal\n   */\n  visit(visitor, state) {\n    if (!(visitor instanceof Visitor)) {\n      visitor = new Visitor(visitor);\n    }\n    visitor.onStart(this.getRoot(), state);\n    this.getRoot().visit(visitor, state);\n    visitor.onEnd(this.getRoot(), state);\n  }\n}\nmodule.exports = {\n  BaseTree,\n  BaseNode,\n  Visitor,\n  CompositeVisitor\n};","map":{"version":3,"names":["Visitor","constructor","delegate","map","k","forEach","fn","Object","defineProperty","prototype","writable","value","node","state","CompositeVisitor","visitors","Array","isArray","v","BaseNode","isRoot","getParent","visit","visitor","isSummary","onSummary","onDetail","getChildren","child","onSummaryEnd","BaseTree","root","getRoot","onStart","onEnd","module","exports"],"sources":["/Users/fasiehkhan/Documents/GitHub/EmployeeHoursLoggingSystem/node_modules/istanbul-lib-report/lib/tree.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\n/**\n * An object with methods that are called during the traversal of the coverage tree.\n * A visitor has the following methods that are called during tree traversal.\n *\n *   * `onStart(root, state)` - called before traversal begins\n *   * `onSummary(node, state)` - called for every summary node\n *   * `onDetail(node, state)` - called for every detail node\n *   * `onSummaryEnd(node, state)` - called after all children have been visited for\n *      a summary node.\n *   * `onEnd(root, state)` - called after traversal ends\n *\n * @param delegate - a partial visitor that only implements the methods of interest\n *  The visitor object supplies the missing methods as noops. For example, reports\n *  that only need the final coverage summary need implement `onStart` and nothing\n *  else. Reports that use only detailed coverage information need implement `onDetail`\n *  and nothing else.\n * @constructor\n */\nclass Visitor {\n    constructor(delegate) {\n        this.delegate = delegate;\n    }\n}\n\n['Start', 'End', 'Summary', 'SummaryEnd', 'Detail']\n    .map(k => `on${k}`)\n    .forEach(fn => {\n        Object.defineProperty(Visitor.prototype, fn, {\n            writable: true,\n            value(node, state) {\n                if (typeof this.delegate[fn] === 'function') {\n                    this.delegate[fn](node, state);\n                }\n            }\n        });\n    });\n\nclass CompositeVisitor extends Visitor {\n    constructor(visitors) {\n        super();\n\n        if (!Array.isArray(visitors)) {\n            visitors = [visitors];\n        }\n        this.visitors = visitors.map(v => {\n            if (v instanceof Visitor) {\n                return v;\n            }\n            return new Visitor(v);\n        });\n    }\n}\n\n['Start', 'Summary', 'SummaryEnd', 'Detail', 'End']\n    .map(k => `on${k}`)\n    .forEach(fn => {\n        Object.defineProperty(CompositeVisitor.prototype, fn, {\n            value(node, state) {\n                this.visitors.forEach(v => {\n                    v[fn](node, state);\n                });\n            }\n        });\n    });\n\nclass BaseNode {\n    isRoot() {\n        return !this.getParent();\n    }\n\n    /**\n     * visit all nodes depth-first from this node down. Note that `onStart`\n     * and `onEnd` are never called on the visitor even if the current\n     * node is the root of the tree.\n     * @param visitor a full visitor that is called during tree traversal\n     * @param state optional state that is passed around\n     */\n    visit(visitor, state) {\n        if (this.isSummary()) {\n            visitor.onSummary(this, state);\n        } else {\n            visitor.onDetail(this, state);\n        }\n\n        this.getChildren().forEach(child => {\n            child.visit(visitor, state);\n        });\n\n        if (this.isSummary()) {\n            visitor.onSummaryEnd(this, state);\n        }\n    }\n}\n\n/**\n * abstract base class for a coverage tree.\n * @constructor\n */\nclass BaseTree {\n    constructor(root) {\n        this.root = root;\n    }\n\n    /**\n     * returns the root node of the tree\n     */\n    getRoot() {\n        return this.root;\n    }\n\n    /**\n     * visits the tree depth-first with the supplied partial visitor\n     * @param visitor - a potentially partial visitor\n     * @param state - the state to be passed around during tree traversal\n     */\n    visit(visitor, state) {\n        if (!(visitor instanceof Visitor)) {\n            visitor = new Visitor(visitor);\n        }\n        visitor.onStart(this.getRoot(), state);\n        this.getRoot().visit(visitor, state);\n        visitor.onEnd(this.getRoot(), state);\n    }\n}\n\nmodule.exports = {\n    BaseTree,\n    BaseNode,\n    Visitor,\n    CompositeVisitor\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}