{"ast":null,"code":"'use strict';\n\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst fs = require('fs');\nconst FileWriter = require('./file-writer');\nconst XMLWriter = require('./xml-writer');\nconst tree = require('./tree');\nconst watermarks = require('./watermarks');\nconst SummarizerFactory = require('./summarizer-factory');\nfunction defaultSourceLookup(path) {\n  try {\n    return fs.readFileSync(path, 'utf8');\n  } catch (ex) {\n    throw new Error(`Unable to lookup source: ${path} (${ex.message})`);\n  }\n}\nfunction normalizeWatermarks() {\n  let specified = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  Object.entries(watermarks.getDefault()).forEach(_ref => {\n    let [k, value] = _ref;\n    const specValue = specified[k];\n    if (!Array.isArray(specValue) || specValue.length !== 2) {\n      specified[k] = value;\n    }\n  });\n  return specified;\n}\n\n/**\n * A reporting context that is passed to report implementations\n * @param {Object} [opts=null] opts options\n * @param {String} [opts.dir='coverage'] opts.dir the reporting directory\n * @param {Object} [opts.watermarks=null] opts.watermarks watermarks for\n *  statements, lines, branches and functions\n * @param {Function} [opts.sourceFinder=fsLookup] opts.sourceFinder a\n *  function that returns source code given a file path. Defaults to\n *  filesystem lookups based on path.\n * @constructor\n */\nclass Context {\n  constructor(opts) {\n    this.dir = opts.dir || 'coverage';\n    this.watermarks = normalizeWatermarks(opts.watermarks);\n    this.sourceFinder = opts.sourceFinder || defaultSourceLookup;\n    this._summarizerFactory = new SummarizerFactory(opts.coverageMap, opts.defaultSummarizer);\n    this.data = {};\n  }\n\n  /**\n   * returns a FileWriter implementation for reporting use. Also available\n   * as the `writer` property on the context.\n   * @returns {Writer}\n   */\n  getWriter() {\n    return this.writer;\n  }\n\n  /**\n   * returns the source code for the specified file path or throws if\n   * the source could not be found.\n   * @param {String} filePath the file path as found in a file coverage object\n   * @returns {String} the source code\n   */\n  getSource(filePath) {\n    return this.sourceFinder(filePath);\n  }\n\n  /**\n   * returns the coverage class given a coverage\n   * types and a percentage value.\n   * @param {String} type - the coverage type, one of `statements`, `functions`,\n   *  `branches`, or `lines`\n   * @param {Number} value - the percentage value\n   * @returns {String} one of `high`, `medium` or `low`\n   */\n  classForPercent(type, value) {\n    const watermarks = this.watermarks[type];\n    if (!watermarks) {\n      return 'unknown';\n    }\n    if (value < watermarks[0]) {\n      return 'low';\n    }\n    if (value >= watermarks[1]) {\n      return 'high';\n    }\n    return 'medium';\n  }\n\n  /**\n   * returns an XML writer for the supplied content writer\n   * @param {ContentWriter} contentWriter the content writer to which the returned XML writer\n   *  writes data\n   * @returns {XMLWriter}\n   */\n  getXMLWriter(contentWriter) {\n    return new XMLWriter(contentWriter);\n  }\n\n  /**\n   * returns a full visitor given a partial one.\n   * @param {Object} partialVisitor a partial visitor only having the functions of\n   *  interest to the caller. These functions are called with a scope that is the\n   *  supplied object.\n   * @returns {Visitor}\n   */\n  getVisitor(partialVisitor) {\n    return new tree.Visitor(partialVisitor);\n  }\n  getTree() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'defaultSummarizer';\n    return this._summarizerFactory[name];\n  }\n}\nObject.defineProperty(Context.prototype, 'writer', {\n  enumerable: true,\n  get() {\n    if (!this.data.writer) {\n      this.data.writer = new FileWriter(this.dir);\n    }\n    return this.data.writer;\n  }\n});\nmodule.exports = Context;","map":{"version":3,"names":["fs","require","FileWriter","XMLWriter","tree","watermarks","SummarizerFactory","defaultSourceLookup","path","readFileSync","ex","Error","message","normalizeWatermarks","specified","Object","entries","getDefault","forEach","k","value","specValue","Array","isArray","length","Context","constructor","opts","dir","sourceFinder","_summarizerFactory","coverageMap","defaultSummarizer","data","getWriter","writer","getSource","filePath","classForPercent","type","getXMLWriter","contentWriter","getVisitor","partialVisitor","Visitor","getTree","name","defineProperty","prototype","enumerable","get","module","exports"],"sources":["/Users/fasiehkhan/Documents/GitHub/EmployeeHoursLoggingSystem/node_modules/istanbul-lib-report/lib/context.js"],"sourcesContent":["'use strict';\n/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nconst fs = require('fs');\nconst FileWriter = require('./file-writer');\nconst XMLWriter = require('./xml-writer');\nconst tree = require('./tree');\nconst watermarks = require('./watermarks');\nconst SummarizerFactory = require('./summarizer-factory');\n\nfunction defaultSourceLookup(path) {\n    try {\n        return fs.readFileSync(path, 'utf8');\n    } catch (ex) {\n        throw new Error(`Unable to lookup source: ${path} (${ex.message})`);\n    }\n}\n\nfunction normalizeWatermarks(specified = {}) {\n    Object.entries(watermarks.getDefault()).forEach(([k, value]) => {\n        const specValue = specified[k];\n        if (!Array.isArray(specValue) || specValue.length !== 2) {\n            specified[k] = value;\n        }\n    });\n\n    return specified;\n}\n\n/**\n * A reporting context that is passed to report implementations\n * @param {Object} [opts=null] opts options\n * @param {String} [opts.dir='coverage'] opts.dir the reporting directory\n * @param {Object} [opts.watermarks=null] opts.watermarks watermarks for\n *  statements, lines, branches and functions\n * @param {Function} [opts.sourceFinder=fsLookup] opts.sourceFinder a\n *  function that returns source code given a file path. Defaults to\n *  filesystem lookups based on path.\n * @constructor\n */\nclass Context {\n    constructor(opts) {\n        this.dir = opts.dir || 'coverage';\n        this.watermarks = normalizeWatermarks(opts.watermarks);\n        this.sourceFinder = opts.sourceFinder || defaultSourceLookup;\n        this._summarizerFactory = new SummarizerFactory(\n            opts.coverageMap,\n            opts.defaultSummarizer\n        );\n        this.data = {};\n    }\n\n    /**\n     * returns a FileWriter implementation for reporting use. Also available\n     * as the `writer` property on the context.\n     * @returns {Writer}\n     */\n    getWriter() {\n        return this.writer;\n    }\n\n    /**\n     * returns the source code for the specified file path or throws if\n     * the source could not be found.\n     * @param {String} filePath the file path as found in a file coverage object\n     * @returns {String} the source code\n     */\n    getSource(filePath) {\n        return this.sourceFinder(filePath);\n    }\n\n    /**\n     * returns the coverage class given a coverage\n     * types and a percentage value.\n     * @param {String} type - the coverage type, one of `statements`, `functions`,\n     *  `branches`, or `lines`\n     * @param {Number} value - the percentage value\n     * @returns {String} one of `high`, `medium` or `low`\n     */\n    classForPercent(type, value) {\n        const watermarks = this.watermarks[type];\n        if (!watermarks) {\n            return 'unknown';\n        }\n        if (value < watermarks[0]) {\n            return 'low';\n        }\n        if (value >= watermarks[1]) {\n            return 'high';\n        }\n        return 'medium';\n    }\n\n    /**\n     * returns an XML writer for the supplied content writer\n     * @param {ContentWriter} contentWriter the content writer to which the returned XML writer\n     *  writes data\n     * @returns {XMLWriter}\n     */\n    getXMLWriter(contentWriter) {\n        return new XMLWriter(contentWriter);\n    }\n\n    /**\n     * returns a full visitor given a partial one.\n     * @param {Object} partialVisitor a partial visitor only having the functions of\n     *  interest to the caller. These functions are called with a scope that is the\n     *  supplied object.\n     * @returns {Visitor}\n     */\n    getVisitor(partialVisitor) {\n        return new tree.Visitor(partialVisitor);\n    }\n\n    getTree(name = 'defaultSummarizer') {\n        return this._summarizerFactory[name];\n    }\n}\n\nObject.defineProperty(Context.prototype, 'writer', {\n    enumerable: true,\n    get() {\n        if (!this.data.writer) {\n            this.data.writer = new FileWriter(this.dir);\n        }\n        return this.data.writer;\n    }\n});\n\nmodule.exports = Context;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}