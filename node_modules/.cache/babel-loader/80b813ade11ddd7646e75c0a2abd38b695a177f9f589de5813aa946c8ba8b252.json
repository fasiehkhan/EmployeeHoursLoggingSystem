{"ast":null,"code":"/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst path = require('path');\nlet parsePath = path.parse;\nlet SEP = path.sep;\nconst origParser = parsePath;\nconst origSep = SEP;\nfunction makeRelativeNormalizedPath(str, sep) {\n  const parsed = parsePath(str);\n  let root = parsed.root;\n  let dir;\n  let file = parsed.base;\n  let quoted;\n  let pos;\n\n  // handle a weird windows case separately\n  if (sep === '\\\\') {\n    pos = root.indexOf(':\\\\');\n    if (pos >= 0) {\n      root = root.substring(0, pos + 2);\n    }\n  }\n  dir = parsed.dir.substring(root.length);\n  if (str === '') {\n    return [];\n  }\n  if (sep !== '/') {\n    quoted = new RegExp(sep.replace(/\\W/g, '\\\\$&'), 'g');\n    dir = dir.replace(quoted, '/');\n    file = file.replace(quoted, '/'); // excessively paranoid?\n  }\n\n  if (dir !== '') {\n    dir = `${dir}/${file}`;\n  } else {\n    dir = file;\n  }\n  if (dir.substring(0, 1) === '/') {\n    dir = dir.substring(1);\n  }\n  dir = dir.split(/\\/+/);\n  return dir;\n}\nclass Path {\n  constructor(strOrArray) {\n    if (Array.isArray(strOrArray)) {\n      this.v = strOrArray;\n    } else if (typeof strOrArray === 'string') {\n      this.v = makeRelativeNormalizedPath(strOrArray, SEP);\n    } else {\n      throw new Error(`Invalid Path argument must be string or array:${strOrArray}`);\n    }\n  }\n  toString() {\n    return this.v.join('/');\n  }\n  hasParent() {\n    return this.v.length > 0;\n  }\n  parent() {\n    if (!this.hasParent()) {\n      throw new Error('Unable to get parent for 0 elem path');\n    }\n    const p = this.v.slice();\n    p.pop();\n    return new Path(p);\n  }\n  elements() {\n    return this.v.slice();\n  }\n  name() {\n    return this.v.slice(-1)[0];\n  }\n  contains(other) {\n    let i;\n    if (other.length > this.length) {\n      return false;\n    }\n    for (i = 0; i < other.length; i += 1) {\n      if (this.v[i] !== other.v[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n  ancestorOf(other) {\n    return other.contains(this) && other.length !== this.length;\n  }\n  descendantOf(other) {\n    return this.contains(other) && other.length !== this.length;\n  }\n  commonPrefixPath(other) {\n    const len = this.length > other.length ? other.length : this.length;\n    let i;\n    const ret = [];\n    for (i = 0; i < len; i += 1) {\n      if (this.v[i] === other.v[i]) {\n        ret.push(this.v[i]);\n      } else {\n        break;\n      }\n    }\n    return new Path(ret);\n  }\n  static compare(a, b) {\n    const al = a.length;\n    const bl = b.length;\n    if (al < bl) {\n      return -1;\n    }\n    if (al > bl) {\n      return 1;\n    }\n    const astr = a.toString();\n    const bstr = b.toString();\n    return astr < bstr ? -1 : astr > bstr ? 1 : 0;\n  }\n}\n['push', 'pop', 'shift', 'unshift', 'splice'].forEach(fn => {\n  Object.defineProperty(Path.prototype, fn, {\n    value() {\n      return this.v[fn](...arguments);\n    }\n  });\n});\nObject.defineProperty(Path.prototype, 'length', {\n  enumerable: true,\n  get() {\n    return this.v.length;\n  }\n});\nmodule.exports = Path;\nPath.tester = {\n  setParserAndSep(p, sep) {\n    parsePath = p;\n    SEP = sep;\n  },\n  reset() {\n    parsePath = origParser;\n    SEP = origSep;\n  }\n};","map":{"version":3,"names":["path","require","parsePath","parse","SEP","sep","origParser","origSep","makeRelativeNormalizedPath","str","parsed","root","dir","file","base","quoted","pos","indexOf","substring","length","RegExp","replace","split","Path","constructor","strOrArray","Array","isArray","v","Error","toString","join","hasParent","parent","p","slice","pop","elements","name","contains","other","i","ancestorOf","descendantOf","commonPrefixPath","len","ret","push","compare","a","b","al","bl","astr","bstr","forEach","fn","Object","defineProperty","prototype","value","enumerable","get","module","exports","tester","setParserAndSep","reset"],"sources":["/Users/fasiehkhan/Documents/GitHub/EmployeeHoursLoggingSystem/node_modules/istanbul-lib-report/lib/path.js"],"sourcesContent":["/*\n Copyright 2012-2015, Yahoo Inc.\n Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nconst path = require('path');\nlet parsePath = path.parse;\nlet SEP = path.sep;\nconst origParser = parsePath;\nconst origSep = SEP;\n\nfunction makeRelativeNormalizedPath(str, sep) {\n    const parsed = parsePath(str);\n    let root = parsed.root;\n    let dir;\n    let file = parsed.base;\n    let quoted;\n    let pos;\n\n    // handle a weird windows case separately\n    if (sep === '\\\\') {\n        pos = root.indexOf(':\\\\');\n        if (pos >= 0) {\n            root = root.substring(0, pos + 2);\n        }\n    }\n    dir = parsed.dir.substring(root.length);\n\n    if (str === '') {\n        return [];\n    }\n\n    if (sep !== '/') {\n        quoted = new RegExp(sep.replace(/\\W/g, '\\\\$&'), 'g');\n        dir = dir.replace(quoted, '/');\n        file = file.replace(quoted, '/'); // excessively paranoid?\n    }\n\n    if (dir !== '') {\n        dir = `${dir}/${file}`;\n    } else {\n        dir = file;\n    }\n    if (dir.substring(0, 1) === '/') {\n        dir = dir.substring(1);\n    }\n    dir = dir.split(/\\/+/);\n    return dir;\n}\n\nclass Path {\n    constructor(strOrArray) {\n        if (Array.isArray(strOrArray)) {\n            this.v = strOrArray;\n        } else if (typeof strOrArray === 'string') {\n            this.v = makeRelativeNormalizedPath(strOrArray, SEP);\n        } else {\n            throw new Error(\n                `Invalid Path argument must be string or array:${strOrArray}`\n            );\n        }\n    }\n\n    toString() {\n        return this.v.join('/');\n    }\n\n    hasParent() {\n        return this.v.length > 0;\n    }\n\n    parent() {\n        if (!this.hasParent()) {\n            throw new Error('Unable to get parent for 0 elem path');\n        }\n        const p = this.v.slice();\n        p.pop();\n        return new Path(p);\n    }\n\n    elements() {\n        return this.v.slice();\n    }\n\n    name() {\n        return this.v.slice(-1)[0];\n    }\n\n    contains(other) {\n        let i;\n        if (other.length > this.length) {\n            return false;\n        }\n        for (i = 0; i < other.length; i += 1) {\n            if (this.v[i] !== other.v[i]) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    ancestorOf(other) {\n        return other.contains(this) && other.length !== this.length;\n    }\n\n    descendantOf(other) {\n        return this.contains(other) && other.length !== this.length;\n    }\n\n    commonPrefixPath(other) {\n        const len = this.length > other.length ? other.length : this.length;\n        let i;\n        const ret = [];\n\n        for (i = 0; i < len; i += 1) {\n            if (this.v[i] === other.v[i]) {\n                ret.push(this.v[i]);\n            } else {\n                break;\n            }\n        }\n        return new Path(ret);\n    }\n\n    static compare(a, b) {\n        const al = a.length;\n        const bl = b.length;\n\n        if (al < bl) {\n            return -1;\n        }\n\n        if (al > bl) {\n            return 1;\n        }\n\n        const astr = a.toString();\n        const bstr = b.toString();\n        return astr < bstr ? -1 : astr > bstr ? 1 : 0;\n    }\n}\n\n['push', 'pop', 'shift', 'unshift', 'splice'].forEach(fn => {\n    Object.defineProperty(Path.prototype, fn, {\n        value(...args) {\n            return this.v[fn](...args);\n        }\n    });\n});\n\nObject.defineProperty(Path.prototype, 'length', {\n    enumerable: true,\n    get() {\n        return this.v.length;\n    }\n});\n\nmodule.exports = Path;\nPath.tester = {\n    setParserAndSep(p, sep) {\n        parsePath = p;\n        SEP = sep;\n    },\n    reset() {\n        parsePath = origParser;\n        SEP = origSep;\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}